//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UNET_Tester.UNET_Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PTTuser", Namespace="http://schemas.datacontract.org/2004/07/UNET_Service")]
    public enum PTTuser : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        puTrainee = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        puInstructor = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PTTcaller", Namespace="http://schemas.datacontract.org/2004/07/UNET_Service")]
    [System.SerializableAttribute()]
    public partial class PTTcaller : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AcknowledgedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PTTCallerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PTTDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UNET_Tester.UNET_Service.PTTuser UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Acknowledged {
            get {
                return this.AcknowledgedField;
            }
            set {
                if ((this.AcknowledgedField.Equals(value) != true)) {
                    this.AcknowledgedField = value;
                    this.RaisePropertyChanged("Acknowledged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PTTCallerID {
            get {
                return this.PTTCallerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PTTCallerIDField, value) != true)) {
                    this.PTTCallerIDField = value;
                    this.RaisePropertyChanged("PTTCallerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PTTDateTime {
            get {
                return this.PTTDateTimeField;
            }
            set {
                if ((this.PTTDateTimeField.Equals(value) != true)) {
                    this.PTTDateTimeField = value;
                    this.RaisePropertyChanged("PTTDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UNET_Tester.UNET_Service.PTTuser User {
            get {
                return this.UserField;
            }
            set {
                if ((this.UserField.Equals(value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDataType", Namespace="http://schemas.datacontract.org/2004/07/UNET_Service")]
    [System.SerializableAttribute()]
    public partial class EventDataType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventMessage {
            get {
                return this.EventMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.EventMessageField, value) != true)) {
                    this.EventMessageField = value;
                    this.RaisePropertyChanged("EventMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UNET_Service.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisconnectVCS", ReplyAction="http://tempuri.org/IService1/DisconnectVCSResponse")]
        bool DisconnectVCS();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisconnectVCS", ReplyAction="http://tempuri.org/IService1/DisconnectVCSResponse")]
        System.Threading.Tasks.Task<bool> DisconnectVCSAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        bool Reset();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        System.Threading.Tasks.Task<bool> ResetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        bool Login();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Start", ReplyAction="http://tempuri.org/IService1/StartResponse")]
        bool Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Start", ReplyAction="http://tempuri.org/IService1/StartResponse")]
        System.Threading.Tasks.Task<bool> StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Stop", ReplyAction="http://tempuri.org/IService1/StopResponse")]
        bool Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Stop", ReplyAction="http://tempuri.org/IService1/StopResponse")]
        System.Threading.Tasks.Task<bool> StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/KeepAlive", ReplyAction="http://tempuri.org/IService1/KeepAliveResponse")]
        bool KeepAlive(string _id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/KeepAlive", ReplyAction="http://tempuri.org/IService1/KeepAliveResponse")]
        System.Threading.Tasks.Task<bool> KeepAliveAsync(string _id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPTT", ReplyAction="http://tempuri.org/IService1/AddPTTResponse")]
        bool AddPTT(string _traineeInstructorID, UNET_Tester.UNET_Service.PTTuser _pttUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPTT", ReplyAction="http://tempuri.org/IService1/AddPTTResponse")]
        System.Threading.Tasks.Task<bool> AddPTTAsync(string _traineeInstructorID, UNET_Tester.UNET_Service.PTTuser _pttUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AcknowledgePTT", ReplyAction="http://tempuri.org/IService1/AcknowledgePTTResponse")]
        bool AcknowledgePTT(string _traineeInstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AcknowledgePTT", ReplyAction="http://tempuri.org/IService1/AcknowledgePTTResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgePTTAsync(string _traineeInstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPTTQueue", ReplyAction="http://tempuri.org/IService1/GetPTTQueueResponse")]
        UNET_Tester.UNET_Service.PTTcaller[] GetPTTQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPTTQueue", ReplyAction="http://tempuri.org/IService1/GetPTTQueueResponse")]
        System.Threading.Tasks.Task<UNET_Tester.UNET_Service.PTTcaller[]> GetPTTQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetP2P", ReplyAction="http://tempuri.org/IService1/GetP2PResponse")]
        UNET_Classes.PointToPoint[] GetP2P(string _instructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetP2P", ReplyAction="http://tempuri.org/IService1/GetP2PResponse")]
        System.Threading.Tasks.Task<UNET_Classes.PointToPoint[]> GetP2PAsync(string _instructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AcknowledgeP2P", ReplyAction="http://tempuri.org/IService1/AcknowledgeP2PResponse")]
        bool AcknowledgeP2P(string _traineeInstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AcknowledgeP2P", ReplyAction="http://tempuri.org/IService1/AcknowledgeP2PResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgeP2PAsync(string _traineeInstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RequestPointToPoint", ReplyAction="http://tempuri.org/IService1/RequestPointToPointResponse")]
        bool RequestPointToPoint(string _traineeInstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RequestPointToPoint", ReplyAction="http://tempuri.org/IService1/RequestPointToPointResponse")]
        System.Threading.Tasks.Task<bool> RequestPointToPointAsync(string _traineeInstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAssist", ReplyAction="http://tempuri.org/IService1/CreateAssistResponse")]
        bool CreateAssist(string _traineeId, string _traineeInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAssist", ReplyAction="http://tempuri.org/IService1/CreateAssistResponse")]
        System.Threading.Tasks.Task<bool> CreateAssistAsync(string _traineeId, string _traineeInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AcknowledgeAssist", ReplyAction="http://tempuri.org/IService1/AcknowledgeAssistResponse")]
        bool AcknowledgeAssist(string _instructorID, string _traineeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AcknowledgeAssist", ReplyAction="http://tempuri.org/IService1/AcknowledgeAssistResponse")]
        System.Threading.Tasks.Task<bool> AcknowledgeAssistAsync(string _instructorID, string _traineeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAssists", ReplyAction="http://tempuri.org/IService1/GetAssistsResponse")]
        UNET_Classes.Assist[] GetAssists(string _instructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAssists", ReplyAction="http://tempuri.org/IService1/GetAssistsResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Assist[]> GetAssistsAsync(string _instructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRole", ReplyAction="http://tempuri.org/IService1/AddRoleResponse")]
        bool AddRole(UNET_Classes.Role _Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRole", ReplyAction="http://tempuri.org/IService1/AddRoleResponse")]
        System.Threading.Tasks.Task<bool> AddRoleAsync(UNET_Classes.Role _Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTrainee", ReplyAction="http://tempuri.org/IService1/AddTraineeResponse")]
        bool AddTrainee(UNET_Classes.Trainee _trainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTrainee", ReplyAction="http://tempuri.org/IService1/AddTraineeResponse")]
        System.Threading.Tasks.Task<bool> AddTraineeAsync(UNET_Classes.Trainee _trainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddInstructor", ReplyAction="http://tempuri.org/IService1/AddInstructorResponse")]
        bool AddInstructor(UNET_Classes.Instructor _instructor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddInstructor", ReplyAction="http://tempuri.org/IService1/AddInstructorResponse")]
        System.Threading.Tasks.Task<bool> AddInstructorAsync(UNET_Classes.Instructor _instructor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlatform", ReplyAction="http://tempuri.org/IService1/AddPlatformResponse")]
        bool AddPlatform(UNET_Classes.Platform _platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlatform", ReplyAction="http://tempuri.org/IService1/AddPlatformResponse")]
        System.Threading.Tasks.Task<bool> AddPlatformAsync(UNET_Classes.Platform _platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRadioObject", ReplyAction="http://tempuri.org/IService1/AddRadioObjectResponse")]
        bool AddRadioObject(UNET_Classes.Radio _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRadioObject", ReplyAction="http://tempuri.org/IService1/AddRadioObjectResponse")]
        System.Threading.Tasks.Task<bool> AddRadioObjectAsync(UNET_Classes.Radio _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExercise", ReplyAction="http://tempuri.org/IService1/AddExerciseResponse")]
        bool AddExercise(UNET_Classes.Exercise _exercise);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExercise", ReplyAction="http://tempuri.org/IService1/AddExerciseResponse")]
        System.Threading.Tasks.Task<bool> AddExerciseAsync(UNET_Classes.Exercise _exercise);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRadio", ReplyAction="http://tempuri.org/IService1/AddRadioResponse")]
        bool AddRadio(string _radioname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRadio", ReplyAction="http://tempuri.org/IService1/AddRadioResponse")]
        System.Threading.Tasks.Task<bool> AddRadioAsync(string _radioname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRadioToExercise", ReplyAction="http://tempuri.org/IService1/AddRadioToExerciseResponse")]
        bool AddRadioToExercise(int _exerciseID, UNET_Classes.Radio _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRadioToExercise", ReplyAction="http://tempuri.org/IService1/AddRadioToExerciseResponse")]
        System.Threading.Tasks.Task<bool> AddRadioToExerciseAsync(int _exerciseID, UNET_Classes.Radio _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlatformToExercise", ReplyAction="http://tempuri.org/IService1/AddPlatformToExerciseResponse")]
        bool AddPlatformToExercise(int _exerciseID, string _platformName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPlatformToExercise", ReplyAction="http://tempuri.org/IService1/AddPlatformToExerciseResponse")]
        System.Threading.Tasks.Task<bool> AddPlatformToExerciseAsync(int _exerciseID, string _platformName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRoleToExercise", ReplyAction="http://tempuri.org/IService1/AddRoleToExerciseResponse")]
        bool AddRoleToExercise(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRoleToExercise", ReplyAction="http://tempuri.org/IService1/AddRoleToExerciseResponse")]
        System.Threading.Tasks.Task<bool> AddRoleToExerciseAsync(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTraineeToExercise", ReplyAction="http://tempuri.org/IService1/AddTraineeToExerciseResponse")]
        bool AddTraineeToExercise(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTraineeToExercise", ReplyAction="http://tempuri.org/IService1/AddTraineeToExerciseResponse")]
        System.Threading.Tasks.Task<bool> AddTraineeToExerciseAsync(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddInstructorRadio", ReplyAction="http://tempuri.org/IService1/AddInstructorRadioResponse")]
        bool AddInstructorRadio(int _exerciseID, UNET_Classes.Instructor _instructor, UNET_Classes.Radio _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddInstructorRadio", ReplyAction="http://tempuri.org/IService1/AddInstructorRadioResponse")]
        System.Threading.Tasks.Task<bool> AddInstructorRadioAsync(int _exerciseID, UNET_Classes.Instructor _instructor, UNET_Classes.Radio _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllInstructorData", ReplyAction="http://tempuri.org/IService1/GetAllInstructorDataResponse")]
        UNET_Classes.Instructor GetAllInstructorData(string _instructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllInstructorData", ReplyAction="http://tempuri.org/IService1/GetAllInstructorDataResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Instructor> GetAllInstructorDataAsync(string _instructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExercises", ReplyAction="http://tempuri.org/IService1/GetExercisesResponse")]
        UNET_Classes.Exercise[] GetExercises();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExercises", ReplyAction="http://tempuri.org/IService1/GetExercisesResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Exercise[]> GetExercisesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoles", ReplyAction="http://tempuri.org/IService1/GetRolesResponse")]
        UNET_Classes.Role[] GetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoles", ReplyAction="http://tempuri.org/IService1/GetRolesResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Role[]> GetRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRadios", ReplyAction="http://tempuri.org/IService1/GetRadiosResponse")]
        UNET_Classes.Radio[] GetRadios();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRadios", ReplyAction="http://tempuri.org/IService1/GetRadiosResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Radio[]> GetRadiosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInstructors", ReplyAction="http://tempuri.org/IService1/GetInstructorsResponse")]
        UNET_Classes.Instructor[] GetInstructors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetInstructors", ReplyAction="http://tempuri.org/IService1/GetInstructorsResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Instructor[]> GetInstructorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrainees", ReplyAction="http://tempuri.org/IService1/GetTraineesResponse")]
        UNET_Classes.Trainee[] GetTrainees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTrainees", ReplyAction="http://tempuri.org/IService1/GetTraineesResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Trainee[]> GetTraineesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlatforms", ReplyAction="http://tempuri.org/IService1/GetPlatformsResponse")]
        UNET_Classes.Platform[] GetPlatforms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlatforms", ReplyAction="http://tempuri.org/IService1/GetPlatformsResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Platform[]> GetPlatformsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExerciseInfo", ReplyAction="http://tempuri.org/IService1/GetExerciseInfoResponse")]
        UNET_Classes.CurrentInfo GetExerciseInfo(string _traineeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExerciseInfo", ReplyAction="http://tempuri.org/IService1/GetExerciseInfoResponse")]
        System.Threading.Tasks.Task<UNET_Classes.CurrentInfo> GetExerciseInfoAsync(string _traineeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTraineeStatus", ReplyAction="http://tempuri.org/IService1/GetTraineeStatusResponse")]
        bool[] GetTraineeStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTraineeStatus", ReplyAction="http://tempuri.org/IService1/GetTraineeStatusResponse")]
        System.Threading.Tasks.Task<bool[]> GetTraineeStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTraineeStatusChanged", ReplyAction="http://tempuri.org/IService1/GetTraineeStatusChangedResponse")]
        bool GetTraineeStatusChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTraineeStatusChanged", ReplyAction="http://tempuri.org/IService1/GetTraineeStatusChangedResponse")]
        System.Threading.Tasks.Task<bool> GetTraineeStatusChangedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTraineeRoles", ReplyAction="http://tempuri.org/IService1/GetTraineeRolesResponse")]
        UNET_Classes.Role[] GetTraineeRoles(string _traineeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTraineeRoles", ReplyAction="http://tempuri.org/IService1/GetTraineeRolesResponse")]
        System.Threading.Tasks.Task<UNET_Classes.Role[]> GetTraineeRolesAsync(string _traineeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNoiseLevelChanged", ReplyAction="http://tempuri.org/IService1/GetNoiseLevelChangedResponse")]
        bool GetNoiseLevelChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNoiseLevelChanged", ReplyAction="http://tempuri.org/IService1/GetNoiseLevelChangedResponse")]
        System.Threading.Tasks.Task<bool> GetNoiseLevelChangedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNoiseLevel", ReplyAction="http://tempuri.org/IService1/GetNoiseLevelResponse")]
        int GetNoiseLevel(int _radioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNoiseLevel", ReplyAction="http://tempuri.org/IService1/GetNoiseLevelResponse")]
        System.Threading.Tasks.Task<int> GetNoiseLevelAsync(int _radioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPendingChanges", ReplyAction="http://tempuri.org/IService1/GetPendingChangesResponse")]
        System.DateTime GetPendingChanges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPendingChanges", ReplyAction="http://tempuri.org/IService1/GetPendingChangesResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetPendingChangesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterClient", ReplyAction="http://tempuri.org/IService1/RegisterClientResponse")]
        bool RegisterClient(string _clientID, string _displayName, bool _isTrainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterClient", ReplyAction="http://tempuri.org/IService1/RegisterClientResponse")]
        System.Threading.Tasks.Task<bool> RegisterClientAsync(string _clientID, string _displayName, bool _isTrainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UnRegisterClient", ReplyAction="http://tempuri.org/IService1/UnRegisterClientResponse")]
        bool UnRegisterClient(string _clientID, bool _isTrainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UnRegisterClient", ReplyAction="http://tempuri.org/IService1/UnRegisterClientResponse")]
        System.Threading.Tasks.Task<bool> UnRegisterClientAsync(string _clientID, bool _isTrainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NotifyServer", ReplyAction="http://tempuri.org/IService1/NotifyServerResponse")]
        void NotifyServer(UNET_Tester.UNET_Service.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NotifyServer", ReplyAction="http://tempuri.org/IService1/NotifyServerResponse")]
        System.Threading.Tasks.Task NotifyServerAsync(UNET_Tester.UNET_Service.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetExerciseSelected", ReplyAction="http://tempuri.org/IService1/SetExerciseSelectedResponse")]
        bool SetExerciseSelected(string _instructor, int _exerciseIndex, bool _select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetExerciseSelected", ReplyAction="http://tempuri.org/IService1/SetExerciseSelectedResponse")]
        System.Threading.Tasks.Task<bool> SetExerciseSelectedAsync(string _instructor, int _exerciseIndex, bool _select);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetExercises", ReplyAction="http://tempuri.org/IService1/SetExercisesResponse")]
        bool SetExercises(UNET_Classes.Exercise[] _exercises);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetExercises", ReplyAction="http://tempuri.org/IService1/SetExercisesResponse")]
        System.Threading.Tasks.Task<bool> SetExercisesAsync(UNET_Classes.Exercise[] _exercises);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRoles", ReplyAction="http://tempuri.org/IService1/SetRolesResponse")]
        bool SetRoles(UNET_Classes.Role[] _role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRoles", ReplyAction="http://tempuri.org/IService1/SetRolesResponse")]
        System.Threading.Tasks.Task<bool> SetRolesAsync(UNET_Classes.Role[] _role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadios", ReplyAction="http://tempuri.org/IService1/SetRadiosResponse")]
        bool SetRadios(UNET_Classes.Radio[] _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadios", ReplyAction="http://tempuri.org/IService1/SetRadiosResponse")]
        System.Threading.Tasks.Task<bool> SetRadiosAsync(UNET_Classes.Radio[] _radio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadioStatus", ReplyAction="http://tempuri.org/IService1/SetRadioStatusResponse")]
        bool SetRadioStatus(int _radioNumber, UNET_Classes.UNETRadioState _state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadioStatus", ReplyAction="http://tempuri.org/IService1/SetRadioStatusResponse")]
        System.Threading.Tasks.Task<bool> SetRadioStatusAsync(int _radioNumber, UNET_Classes.UNETRadioState _state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadiosCount", ReplyAction="http://tempuri.org/IService1/SetRadiosCountResponse")]
        bool SetRadiosCount(int _count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadiosCount", ReplyAction="http://tempuri.org/IService1/SetRadiosCountResponse")]
        System.Threading.Tasks.Task<bool> SetRadiosCountAsync(int _count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetInstructors", ReplyAction="http://tempuri.org/IService1/SetInstructorsResponse")]
        bool SetInstructors(UNET_Classes.Instructor[] _instructor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetInstructors", ReplyAction="http://tempuri.org/IService1/SetInstructorsResponse")]
        System.Threading.Tasks.Task<bool> SetInstructorsAsync(UNET_Classes.Instructor[] _instructor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTrainees", ReplyAction="http://tempuri.org/IService1/SetTraineesResponse")]
        bool SetTrainees(UNET_Classes.Trainee[] _trainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTrainees", ReplyAction="http://tempuri.org/IService1/SetTraineesResponse")]
        System.Threading.Tasks.Task<bool> SetTraineesAsync(UNET_Classes.Trainee[] _trainee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPlatforms", ReplyAction="http://tempuri.org/IService1/SetPlatformsResponse")]
        bool SetPlatforms(UNET_Classes.Platform[] _platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetPlatforms", ReplyAction="http://tempuri.org/IService1/SetPlatformsResponse")]
        System.Threading.Tasks.Task<bool> SetPlatformsAsync(UNET_Classes.Platform[] _platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTraineeStatusChanged", ReplyAction="http://tempuri.org/IService1/SetTraineeStatusChangedResponse")]
        bool SetTraineeStatusChanged(string _traineeId, bool _changed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTraineeStatusChanged", ReplyAction="http://tempuri.org/IService1/SetTraineeStatusChangedResponse")]
        System.Threading.Tasks.Task<bool> SetTraineeStatusChangedAsync(string _traineeId, bool _changed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRoleAssignedStatus", ReplyAction="http://tempuri.org/IService1/SetRoleAssignedStatusResponse")]
        bool SetRoleAssignedStatus(string _instructorID, int _exersiseID, int _role, bool _add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRoleAssignedStatus", ReplyAction="http://tempuri.org/IService1/SetRoleAssignedStatusResponse")]
        System.Threading.Tasks.Task<bool> SetRoleAssignedStatusAsync(string _instructorID, int _exersiseID, int _role, bool _add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTraineeAssignedStatus", ReplyAction="http://tempuri.org/IService1/SetTraineeAssignedStatusResponse")]
        bool SetTraineeAssignedStatus(string _instructorID, int _exersiseID, string _traineeID, bool _add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetTraineeAssignedStatus", ReplyAction="http://tempuri.org/IService1/SetTraineeAssignedStatusResponse")]
        System.Threading.Tasks.Task<bool> SetTraineeAssignedStatusAsync(string _instructorID, int _exersiseID, string _traineeID, bool _add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadioAssignedStatus", ReplyAction="http://tempuri.org/IService1/SetRadioAssignedStatusResponse")]
        bool SetRadioAssignedStatus(string _instructorID, int _exersiseID, int _radio, bool _add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetRadioAssignedStatus", ReplyAction="http://tempuri.org/IService1/SetRadioAssignedStatusResponse")]
        System.Threading.Tasks.Task<bool> SetRadioAssignedStatusAsync(string _instructorID, int _exersiseID, int _radio, bool _add);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetNoiseLevelChanged", ReplyAction="http://tempuri.org/IService1/SetNoiseLevelChangedResponse")]
        bool SetNoiseLevelChanged(int _radioId, bool _changed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetNoiseLevelChanged", ReplyAction="http://tempuri.org/IService1/SetNoiseLevelChangedResponse")]
        System.Threading.Tasks.Task<bool> SetNoiseLevelChangedAsync(int _radioId, bool _changed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetNoiseLevel", ReplyAction="http://tempuri.org/IService1/SetNoiseLevelResponse")]
        bool SetNoiseLevel(int _radioID, int _noiselevel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetNoiseLevel", ReplyAction="http://tempuri.org/IService1/SetNoiseLevelResponse")]
        System.Threading.Tasks.Task<bool> SetNoiseLevelAsync(int _radioID, int _noiselevel);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : UNET_Tester.UNET_Service.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<UNET_Tester.UNET_Service.IService1>, UNET_Tester.UNET_Service.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DisconnectVCS() {
            return base.Channel.DisconnectVCS();
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectVCSAsync() {
            return base.Channel.DisconnectVCSAsync();
        }
        
        public bool Reset() {
            return base.Channel.Reset();
        }
        
        public System.Threading.Tasks.Task<bool> ResetAsync() {
            return base.Channel.ResetAsync();
        }
        
        public bool Login() {
            return base.Channel.Login();
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync() {
            return base.Channel.LoginAsync();
        }
        
        public bool Start() {
            return base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task<bool> StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public bool Stop() {
            return base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task<bool> StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public bool KeepAlive(string _id) {
            return base.Channel.KeepAlive(_id);
        }
        
        public System.Threading.Tasks.Task<bool> KeepAliveAsync(string _id) {
            return base.Channel.KeepAliveAsync(_id);
        }
        
        public bool AddPTT(string _traineeInstructorID, UNET_Tester.UNET_Service.PTTuser _pttUser) {
            return base.Channel.AddPTT(_traineeInstructorID, _pttUser);
        }
        
        public System.Threading.Tasks.Task<bool> AddPTTAsync(string _traineeInstructorID, UNET_Tester.UNET_Service.PTTuser _pttUser) {
            return base.Channel.AddPTTAsync(_traineeInstructorID, _pttUser);
        }
        
        public bool AcknowledgePTT(string _traineeInstructorID) {
            return base.Channel.AcknowledgePTT(_traineeInstructorID);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgePTTAsync(string _traineeInstructorID) {
            return base.Channel.AcknowledgePTTAsync(_traineeInstructorID);
        }
        
        public UNET_Tester.UNET_Service.PTTcaller[] GetPTTQueue() {
            return base.Channel.GetPTTQueue();
        }
        
        public System.Threading.Tasks.Task<UNET_Tester.UNET_Service.PTTcaller[]> GetPTTQueueAsync() {
            return base.Channel.GetPTTQueueAsync();
        }
        
        public UNET_Classes.PointToPoint[] GetP2P(string _instructorID) {
            return base.Channel.GetP2P(_instructorID);
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.PointToPoint[]> GetP2PAsync(string _instructorID) {
            return base.Channel.GetP2PAsync(_instructorID);
        }
        
        public bool AcknowledgeP2P(string _traineeInstructorID) {
            return base.Channel.AcknowledgeP2P(_traineeInstructorID);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgeP2PAsync(string _traineeInstructorID) {
            return base.Channel.AcknowledgeP2PAsync(_traineeInstructorID);
        }
        
        public bool RequestPointToPoint(string _traineeInstructorID) {
            return base.Channel.RequestPointToPoint(_traineeInstructorID);
        }
        
        public System.Threading.Tasks.Task<bool> RequestPointToPointAsync(string _traineeInstructorID) {
            return base.Channel.RequestPointToPointAsync(_traineeInstructorID);
        }
        
        public bool CreateAssist(string _traineeId, string _traineeInfo) {
            return base.Channel.CreateAssist(_traineeId, _traineeInfo);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAssistAsync(string _traineeId, string _traineeInfo) {
            return base.Channel.CreateAssistAsync(_traineeId, _traineeInfo);
        }
        
        public bool AcknowledgeAssist(string _instructorID, string _traineeID) {
            return base.Channel.AcknowledgeAssist(_instructorID, _traineeID);
        }
        
        public System.Threading.Tasks.Task<bool> AcknowledgeAssistAsync(string _instructorID, string _traineeID) {
            return base.Channel.AcknowledgeAssistAsync(_instructorID, _traineeID);
        }
        
        public UNET_Classes.Assist[] GetAssists(string _instructorID) {
            return base.Channel.GetAssists(_instructorID);
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Assist[]> GetAssistsAsync(string _instructorID) {
            return base.Channel.GetAssistsAsync(_instructorID);
        }
        
        public bool AddRole(UNET_Classes.Role _Role) {
            return base.Channel.AddRole(_Role);
        }
        
        public System.Threading.Tasks.Task<bool> AddRoleAsync(UNET_Classes.Role _Role) {
            return base.Channel.AddRoleAsync(_Role);
        }
        
        public bool AddTrainee(UNET_Classes.Trainee _trainee) {
            return base.Channel.AddTrainee(_trainee);
        }
        
        public System.Threading.Tasks.Task<bool> AddTraineeAsync(UNET_Classes.Trainee _trainee) {
            return base.Channel.AddTraineeAsync(_trainee);
        }
        
        public bool AddInstructor(UNET_Classes.Instructor _instructor) {
            return base.Channel.AddInstructor(_instructor);
        }
        
        public System.Threading.Tasks.Task<bool> AddInstructorAsync(UNET_Classes.Instructor _instructor) {
            return base.Channel.AddInstructorAsync(_instructor);
        }
        
        public bool AddPlatform(UNET_Classes.Platform _platform) {
            return base.Channel.AddPlatform(_platform);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlatformAsync(UNET_Classes.Platform _platform) {
            return base.Channel.AddPlatformAsync(_platform);
        }
        
        public bool AddRadioObject(UNET_Classes.Radio _radio) {
            return base.Channel.AddRadioObject(_radio);
        }
        
        public System.Threading.Tasks.Task<bool> AddRadioObjectAsync(UNET_Classes.Radio _radio) {
            return base.Channel.AddRadioObjectAsync(_radio);
        }
        
        public bool AddExercise(UNET_Classes.Exercise _exercise) {
            return base.Channel.AddExercise(_exercise);
        }
        
        public System.Threading.Tasks.Task<bool> AddExerciseAsync(UNET_Classes.Exercise _exercise) {
            return base.Channel.AddExerciseAsync(_exercise);
        }
        
        public bool AddRadio(string _radioname) {
            return base.Channel.AddRadio(_radioname);
        }
        
        public System.Threading.Tasks.Task<bool> AddRadioAsync(string _radioname) {
            return base.Channel.AddRadioAsync(_radioname);
        }
        
        public bool AddRadioToExercise(int _exerciseID, UNET_Classes.Radio _radio) {
            return base.Channel.AddRadioToExercise(_exerciseID, _radio);
        }
        
        public System.Threading.Tasks.Task<bool> AddRadioToExerciseAsync(int _exerciseID, UNET_Classes.Radio _radio) {
            return base.Channel.AddRadioToExerciseAsync(_exerciseID, _radio);
        }
        
        public bool AddPlatformToExercise(int _exerciseID, string _platformName) {
            return base.Channel.AddPlatformToExercise(_exerciseID, _platformName);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlatformToExerciseAsync(int _exerciseID, string _platformName) {
            return base.Channel.AddPlatformToExerciseAsync(_exerciseID, _platformName);
        }
        
        public bool AddRoleToExercise(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName) {
            return base.Channel.AddRoleToExercise(_exerciseID, _platform, _traineeName);
        }
        
        public System.Threading.Tasks.Task<bool> AddRoleToExerciseAsync(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName) {
            return base.Channel.AddRoleToExerciseAsync(_exerciseID, _platform, _traineeName);
        }
        
        public bool AddTraineeToExercise(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName) {
            return base.Channel.AddTraineeToExercise(_exerciseID, _platform, _traineeName);
        }
        
        public System.Threading.Tasks.Task<bool> AddTraineeToExerciseAsync(int _exerciseID, UNET_Classes.Platform _platform, string _traineeName) {
            return base.Channel.AddTraineeToExerciseAsync(_exerciseID, _platform, _traineeName);
        }
        
        public bool AddInstructorRadio(int _exerciseID, UNET_Classes.Instructor _instructor, UNET_Classes.Radio _radio) {
            return base.Channel.AddInstructorRadio(_exerciseID, _instructor, _radio);
        }
        
        public System.Threading.Tasks.Task<bool> AddInstructorRadioAsync(int _exerciseID, UNET_Classes.Instructor _instructor, UNET_Classes.Radio _radio) {
            return base.Channel.AddInstructorRadioAsync(_exerciseID, _instructor, _radio);
        }
        
        public UNET_Classes.Instructor GetAllInstructorData(string _instructorID) {
            return base.Channel.GetAllInstructorData(_instructorID);
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Instructor> GetAllInstructorDataAsync(string _instructorID) {
            return base.Channel.GetAllInstructorDataAsync(_instructorID);
        }
        
        public UNET_Classes.Exercise[] GetExercises() {
            return base.Channel.GetExercises();
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Exercise[]> GetExercisesAsync() {
            return base.Channel.GetExercisesAsync();
        }
        
        public UNET_Classes.Role[] GetRoles() {
            return base.Channel.GetRoles();
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Role[]> GetRolesAsync() {
            return base.Channel.GetRolesAsync();
        }
        
        public UNET_Classes.Radio[] GetRadios() {
            return base.Channel.GetRadios();
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Radio[]> GetRadiosAsync() {
            return base.Channel.GetRadiosAsync();
        }
        
        public UNET_Classes.Instructor[] GetInstructors() {
            return base.Channel.GetInstructors();
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Instructor[]> GetInstructorsAsync() {
            return base.Channel.GetInstructorsAsync();
        }
        
        public UNET_Classes.Trainee[] GetTrainees() {
            return base.Channel.GetTrainees();
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Trainee[]> GetTraineesAsync() {
            return base.Channel.GetTraineesAsync();
        }
        
        public UNET_Classes.Platform[] GetPlatforms() {
            return base.Channel.GetPlatforms();
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Platform[]> GetPlatformsAsync() {
            return base.Channel.GetPlatformsAsync();
        }
        
        public UNET_Classes.CurrentInfo GetExerciseInfo(string _traineeID) {
            return base.Channel.GetExerciseInfo(_traineeID);
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.CurrentInfo> GetExerciseInfoAsync(string _traineeID) {
            return base.Channel.GetExerciseInfoAsync(_traineeID);
        }
        
        public bool[] GetTraineeStatus() {
            return base.Channel.GetTraineeStatus();
        }
        
        public System.Threading.Tasks.Task<bool[]> GetTraineeStatusAsync() {
            return base.Channel.GetTraineeStatusAsync();
        }
        
        public bool GetTraineeStatusChanged() {
            return base.Channel.GetTraineeStatusChanged();
        }
        
        public System.Threading.Tasks.Task<bool> GetTraineeStatusChangedAsync() {
            return base.Channel.GetTraineeStatusChangedAsync();
        }
        
        public UNET_Classes.Role[] GetTraineeRoles(string _traineeID) {
            return base.Channel.GetTraineeRoles(_traineeID);
        }
        
        public System.Threading.Tasks.Task<UNET_Classes.Role[]> GetTraineeRolesAsync(string _traineeID) {
            return base.Channel.GetTraineeRolesAsync(_traineeID);
        }
        
        public bool GetNoiseLevelChanged() {
            return base.Channel.GetNoiseLevelChanged();
        }
        
        public System.Threading.Tasks.Task<bool> GetNoiseLevelChangedAsync() {
            return base.Channel.GetNoiseLevelChangedAsync();
        }
        
        public int GetNoiseLevel(int _radioID) {
            return base.Channel.GetNoiseLevel(_radioID);
        }
        
        public System.Threading.Tasks.Task<int> GetNoiseLevelAsync(int _radioID) {
            return base.Channel.GetNoiseLevelAsync(_radioID);
        }
        
        public System.DateTime GetPendingChanges() {
            return base.Channel.GetPendingChanges();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetPendingChangesAsync() {
            return base.Channel.GetPendingChangesAsync();
        }
        
        public bool RegisterClient(string _clientID, string _displayName, bool _isTrainee) {
            return base.Channel.RegisterClient(_clientID, _displayName, _isTrainee);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterClientAsync(string _clientID, string _displayName, bool _isTrainee) {
            return base.Channel.RegisterClientAsync(_clientID, _displayName, _isTrainee);
        }
        
        public bool UnRegisterClient(string _clientID, bool _isTrainee) {
            return base.Channel.UnRegisterClient(_clientID, _isTrainee);
        }
        
        public System.Threading.Tasks.Task<bool> UnRegisterClientAsync(string _clientID, bool _isTrainee) {
            return base.Channel.UnRegisterClientAsync(_clientID, _isTrainee);
        }
        
        public void NotifyServer(UNET_Tester.UNET_Service.EventDataType eventData) {
            base.Channel.NotifyServer(eventData);
        }
        
        public System.Threading.Tasks.Task NotifyServerAsync(UNET_Tester.UNET_Service.EventDataType eventData) {
            return base.Channel.NotifyServerAsync(eventData);
        }
        
        public bool SetExerciseSelected(string _instructor, int _exerciseIndex, bool _select) {
            return base.Channel.SetExerciseSelected(_instructor, _exerciseIndex, _select);
        }
        
        public System.Threading.Tasks.Task<bool> SetExerciseSelectedAsync(string _instructor, int _exerciseIndex, bool _select) {
            return base.Channel.SetExerciseSelectedAsync(_instructor, _exerciseIndex, _select);
        }
        
        public bool SetExercises(UNET_Classes.Exercise[] _exercises) {
            return base.Channel.SetExercises(_exercises);
        }
        
        public System.Threading.Tasks.Task<bool> SetExercisesAsync(UNET_Classes.Exercise[] _exercises) {
            return base.Channel.SetExercisesAsync(_exercises);
        }
        
        public bool SetRoles(UNET_Classes.Role[] _role) {
            return base.Channel.SetRoles(_role);
        }
        
        public System.Threading.Tasks.Task<bool> SetRolesAsync(UNET_Classes.Role[] _role) {
            return base.Channel.SetRolesAsync(_role);
        }
        
        public bool SetRadios(UNET_Classes.Radio[] _radio) {
            return base.Channel.SetRadios(_radio);
        }
        
        public System.Threading.Tasks.Task<bool> SetRadiosAsync(UNET_Classes.Radio[] _radio) {
            return base.Channel.SetRadiosAsync(_radio);
        }
        
        public bool SetRadioStatus(int _radioNumber, UNET_Classes.UNETRadioState _state) {
            return base.Channel.SetRadioStatus(_radioNumber, _state);
        }
        
        public System.Threading.Tasks.Task<bool> SetRadioStatusAsync(int _radioNumber, UNET_Classes.UNETRadioState _state) {
            return base.Channel.SetRadioStatusAsync(_radioNumber, _state);
        }
        
        public bool SetRadiosCount(int _count) {
            return base.Channel.SetRadiosCount(_count);
        }
        
        public System.Threading.Tasks.Task<bool> SetRadiosCountAsync(int _count) {
            return base.Channel.SetRadiosCountAsync(_count);
        }
        
        public bool SetInstructors(UNET_Classes.Instructor[] _instructor) {
            return base.Channel.SetInstructors(_instructor);
        }
        
        public System.Threading.Tasks.Task<bool> SetInstructorsAsync(UNET_Classes.Instructor[] _instructor) {
            return base.Channel.SetInstructorsAsync(_instructor);
        }
        
        public bool SetTrainees(UNET_Classes.Trainee[] _trainee) {
            return base.Channel.SetTrainees(_trainee);
        }
        
        public System.Threading.Tasks.Task<bool> SetTraineesAsync(UNET_Classes.Trainee[] _trainee) {
            return base.Channel.SetTraineesAsync(_trainee);
        }
        
        public bool SetPlatforms(UNET_Classes.Platform[] _platform) {
            return base.Channel.SetPlatforms(_platform);
        }
        
        public System.Threading.Tasks.Task<bool> SetPlatformsAsync(UNET_Classes.Platform[] _platform) {
            return base.Channel.SetPlatformsAsync(_platform);
        }
        
        public bool SetTraineeStatusChanged(string _traineeId, bool _changed) {
            return base.Channel.SetTraineeStatusChanged(_traineeId, _changed);
        }
        
        public System.Threading.Tasks.Task<bool> SetTraineeStatusChangedAsync(string _traineeId, bool _changed) {
            return base.Channel.SetTraineeStatusChangedAsync(_traineeId, _changed);
        }
        
        public bool SetRoleAssignedStatus(string _instructorID, int _exersiseID, int _role, bool _add) {
            return base.Channel.SetRoleAssignedStatus(_instructorID, _exersiseID, _role, _add);
        }
        
        public System.Threading.Tasks.Task<bool> SetRoleAssignedStatusAsync(string _instructorID, int _exersiseID, int _role, bool _add) {
            return base.Channel.SetRoleAssignedStatusAsync(_instructorID, _exersiseID, _role, _add);
        }
        
        public bool SetTraineeAssignedStatus(string _instructorID, int _exersiseID, string _traineeID, bool _add) {
            return base.Channel.SetTraineeAssignedStatus(_instructorID, _exersiseID, _traineeID, _add);
        }
        
        public System.Threading.Tasks.Task<bool> SetTraineeAssignedStatusAsync(string _instructorID, int _exersiseID, string _traineeID, bool _add) {
            return base.Channel.SetTraineeAssignedStatusAsync(_instructorID, _exersiseID, _traineeID, _add);
        }
        
        public bool SetRadioAssignedStatus(string _instructorID, int _exersiseID, int _radio, bool _add) {
            return base.Channel.SetRadioAssignedStatus(_instructorID, _exersiseID, _radio, _add);
        }
        
        public System.Threading.Tasks.Task<bool> SetRadioAssignedStatusAsync(string _instructorID, int _exersiseID, int _radio, bool _add) {
            return base.Channel.SetRadioAssignedStatusAsync(_instructorID, _exersiseID, _radio, _add);
        }
        
        public bool SetNoiseLevelChanged(int _radioId, bool _changed) {
            return base.Channel.SetNoiseLevelChanged(_radioId, _changed);
        }
        
        public System.Threading.Tasks.Task<bool> SetNoiseLevelChangedAsync(int _radioId, bool _changed) {
            return base.Channel.SetNoiseLevelChangedAsync(_radioId, _changed);
        }
        
        public bool SetNoiseLevel(int _radioID, int _noiselevel) {
            return base.Channel.SetNoiseLevel(_radioID, _noiselevel);
        }
        
        public System.Threading.Tasks.Task<bool> SetNoiseLevelAsync(int _radioID, int _noiselevel) {
            return base.Channel.SetNoiseLevelAsync(_radioID, _noiselevel);
        }
    }
}
