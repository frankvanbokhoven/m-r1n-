<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABzQv9zQv9zQv9zQv9xP/9uOvhuOvhuOvhpMPhxP/91Rf9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9z
        Qv9zQv9xP/91Rf9uOvhsNvhuOvhuOvhuOvhxP/9zQv9zQv9zQv9zQv9zQv9zQv9qOP+HXv+GX/+AV/99
        Vf+8pv/9+/////9YFvh8Tf95Sv94Sv94Sv94Sv94Sv94Sv95Sv93Rv9nMvn+///+/f+1oP+HYP9/V/+I
        YP+IYv9pM/lzQv9zQv9zQv9zQf90Q/9jK/jEuf////////////////++qf/q6P8tAPhVHPhZIfhZIfhZ
        IfhZIfhZIfhZIfhZIfhRFPhHCfjf2f++qP/09P/////////////DtP9iJ/h0Q/9zQv9zQv9zQv90Rf9S
        EviUeP/////////////Kuv+pi//Yzv+MZv+RbP+HXf+IXv+IXv+IXv+IXv+IXv+HXf+Paf+aef/Pwv+3
        nf+1oP///////////v+MZ/9aHfhzQv9zQv9zQv9zQv9tOf9mL/h4SP+rk/+fgv+bfP9+U///////////
        ///////9+//9/P/9/v///v/9/v/9/P/9+/////////////////9fKPihhf+dgf+qjP9tOf9uOv9uPP9z
        Qv9zQv90Q/9eI/ivmf/u6P/Vyv9vO/9OCPhXHfjFt//v6P//////////////////////////////////
        ///////////u5v/Pw/9HAPhXGfhjLfrx6//w6v+jhP9oM/tzQv9zQv90RP9WGfjEtf////////+DW/9k
        LfhhKvhiK/hgJ/hfKviPaf+hiv+fif+FYf92Tv+KZf+gif+gif+LZv9cJ/hmM/5eJ/hhJvhoNPh1RP//
        //////+wmf9cH/hzQv9zQv90Rf9RD/jYzv/29P9mMPhgKPhpNvl+UP9rN//v5//h1/9wQv9EAPg7APid
        f//f1f+FZP9KD/hBAPh+WP/m2//l2/9YIPiDV/9oNPhYHPh1R//59/+0pP9WGfhzQv9zQv90RP9REvjd
        0f////91Rf9lMPhvOv9/Uv/bz/////////9lMvx2RP+8o//////y7f/g2P+zlv9rNf+CWf/////////Z
        z/94Sv9xQv9qM/iDWP////+3p/9cIfhzQv9zQv90RP9dI/iigv/////////Kvf9mMv9mNP////+ff/94
        S/+AVf/f2/////////+cf//////////Uzv+JYv9kK/iynf////9JCfh9U//Qwv///////v+Pav9mL/hz
        Qv9zQv90RP9fKPhvP/+mjv////////9SFviLYf/////o3/8+APjv6P////+Vdv/q4v/z7v////+Xef//
        ///Vzf9CAPjl3P////9fJvhvPf////////+Rbf9eJ/hoM/pzQv9zQv9zQv9PDvjg1//////////6+f+c
        eP/////////Nvf9XIfj////////d0/+pjP/////ZzP8nAPj///////9YHfjKvP////////+GX///////
        //////+/q/9mMfhzQv9zQv9tOv90QP/l3v9zQP/69/////92S/////+vk/9IAPh2Sv/////////t5f9Z
        IPj///+Maf+efP////////95Tv9HAPjCrf/69/+QbP////////9eD/jXzP9wPv9xQP9zQv9wP/9zP//k
        4f8cAPjn4//////BrP+slP9TH/hUFfjWyv/////Itv/Jt/97Tv+ukf9sOv/Uxf/29//////Lvv9TFPhh
        Mv+ymf/r5f/////UyP8cAPjUyf96Tf9yQP9zQv9zQv9NC/jPxf96Tf+wmv/////9+v+tmP+xnv/i4f/y
        6/////9/VP/Iuv/HtP+ZdP+vk/+efv/JuP/////m3f/k4v+ql/+ynP////////9+Vf+Sb/+2n/9pNft0
        Q/9zQv9pMvhqNvx1R/+5pP9QE/izoP+qkf/Zy//////y7f+EW//8+//azP/n4P+8qv+ihf/w6//Arv/U
        xP/p4f+Pbv/w6//////Gsv+ojv+4pP9PEvivkP95Sf9gKPhyQP9zQ/9YHfjCrf9bIPi3ov9dIPj//v/v
        6P/p4P+xnf9nMPtjL/v////////Hs/+Xdv9HB/ibeP/+///i2f/h1/9sO/9TFPjLuf/v6v/s5v////9O
        EPi6pf9sO/+adf9vPP9vO/vAsv/////Owv+CWP+SbP/////////////r5v9ZH/haI/j////EtP+8qf//
        //+fgP9BAPj////Lt/////9ZHfg/APj///////////////92Sv+GXP/Nw/////+mif9wPf+iif+mhP+h
        gP9kMPre1f/////////8/P/Bqv/KtP9wRv/////Kuv+Wef////+8q/8CAPj///+ObP////+DWv/Ap//B
        r//////////////JuP9iKPicev+tjv+Wc/90Q/9YHPhJBvhGAPh4TP/////////l3f+ig/+AUf/g2v/Z
        0v/48//////Iuv/s4//Y0f9eJ/j////Ds//////e2P/k3f9sOv+qj//49P////////9sOv9KBfhJBPhq
        Nv1zQv95Sf99UP9uPP+IY//////////Zzv94Tf+eev95WP/////VyP/Luf/////9/f/////n4P//////
        ///////z7f96Wf+gff9zRv/y7f////////9xQ/9yQf98T/90RP9zQv9yQf9yQf9pNPhzQv/28f/////5
        9v+khv94R/9aH/iJY/97Uf9XH/iPZ/+EWf+khP+Scf+LYf9pMviJYf+CVf9iKviAWP+xlv/////////8
        +f9UGfhxQP9yQf9zQv9zQv9zQv9zQv9wPf9kLvji4P/r5P/7+v+4o/9qNf9rNftnM/pUFfiOaf/Fr/+Z
        ef+DW/+egf/Fr/93SP9YGvhpM/loMfh2R/+2of/////49f/Y1v9PDvh0Q/9zQv9zQv9zQv9zQv9zQv9y
        Qf9mMvuGW/+ig/+ymP99T/9sOv91RP9uO/9dIvjl3v/////////p4v/8/v/////d0v9NDPhvPf9wP/9w
        P/9+Uv+4nv+qjf9+U/9lLPh0Q/9zQv9zQv9zQv9zQv9zQv9zQv9xQP9UE/hyRP9uP/9ZHvhxQP9zQv9m
        MPiBVv/d0f/59//////8+v/////e0//z9P95TP9nMvh1RP9vPf9hKPhpNPhwQP9WFfh0Rf9zQv9zQv9z
        Qv9zQv9zQv9zQv9zQv90Q/93Sv9vPP9vPP93SP90Q/9xP/9pNv+vkv+RbP/d0f+egf+xm//BrP+zn/+f
        hP+8qP9lLvhyP/9zQ/91Rv9xPv9vPf93SP9zQ/9yQf9zQv9zQv9zQv9zQv9zQv9zQv9yQf9zQf9zQv9z
        Qv9zQv9zQv9sOPyGX//Ovv96T//Tx/93S//m3f94S//l2f9lL/nArP97Tf9uOv9zQv9zQv9zQv9zQv9z
        Qv9yQf9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9wPP9yQv+ihP/Sxv+zmv+L
        Yf+vlf90R//Yz/+vmf+qkP9pNflyPv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9z
        Qv9zQv9zQv9zQv9zQv9zQv9zQv9yQf9sOP9qNfiqj/+6pv+Ub//Kvf+LZv/Lvf+OaP93S/9oNPlzQv9z
        Qv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9z
        Qv9jK/hjLfiXdf99U//h3f99UP+Wc/9aIPhmMPh0Q/9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9z
        Qv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv91Rv9wPP9YHPh7Sv/Br/9nMv5cIfh0
        RP91Rv9zQv9yQf9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9z
        Qv9zQv9zQv9zQv9zQv9zQv9zQv9xP/+Qav+1nP+AVP9xP/9zQv9zQv9zQv9zQv9zQv9zQv9zQv9zQv9z
        Qv9zQv9zQv9zQv9zQv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>